{"version":3,"sources":["./src/app/Pages/group-chat/group-chat.page.html","./src/app/Pages/group-chat/group-chat-routing.module.ts","./src/app/Pages/group-chat/group-chat.module.ts","./src/app/Pages/group-chat/group-chat.page.scss","./src/app/Pages/group-chat/group-chat.page.ts"],"names":[],"mappings":"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","file":"group-chat-group-chat-module-es2015.js","sourcesContent":["export default \"\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content\\n      pullingIcon=\\\"arrow-down-outline\\\"\\n      pullingText=\\\"Pull to refresh\\\"\\n      refreshingSpinner=\\\"dots\\\"\\n      refreshingText=\\\"Refreshing...\\\">\\n    </ion-refresher-content>\\n  </ion-refresher>\\n\\n<ion-item-divider>\\n  <ion-label>\\n    Signed in as: {{ currentUserEmail }}\\n  </ion-label>\\n</ion-item-divider>\\n\\n  <!-- Showing Groups created using \\\"Create A Group Button\\\" -->\\n  <ion-item-divider *ngIf=\\\"listOfGroups2.length!=0\\\">\\n    <ion-label>Your Groups</ion-label>\\n  </ion-item-divider>\\n  <ion-item button *ngFor=\\\"let item of listOfGroups2;\\\"\\n    (click)=\\\"GroupChat(item.payload.doc.data().id,item.payload.doc.data().title)\\\"\\n  >\\n    <ion-label class=\\\"ion-text-wrap\\\">\\n      <ion-text color=\\\"primary\\\">\\n        <h3>{{ item.payload.doc.data().title }}</h3>\\n        </ion-text>\\n        <p>{{ item.payload.doc.data().users}} Users</p>\\n        <!-- <p>Group id: {{ item.payload.doc.data().id }}</p> -->\\n    </ion-label>\\n  </ion-item>\\n\\n\\n\\n<ion-item-divider>\\n  <ion-label>\\n    Contacts (All Available Users)\\n  </ion-label>\\n</ion-item-divider>\\n<ion-item button *ngFor=\\\"let item of listOfUsers;\\\"  (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().userName)\\\">\\n  <ion-label>\\n    {{ item.payload.doc.data().email }}\\n    <p>{{ item.payload.doc.data().userName }}</p>\\n  </ion-label>\\n  <!-- Keep either a button or a routerlink--both togather will not work -->\\n  <!-- <ion-button icon-only (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n    <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n  </ion-button> -->\\n  <!-- <ion-button icon-only>\\n    <ion-icon name=\\\"call-outline\\\"></ion-icon>\\n  </ion-button> -->\\n</ion-item>\\n\\n\\n\\n\\n\\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/start-chat\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { GroupChatPage } from './group-chat.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GroupChatPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class GroupChatPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { GroupChatPageRoutingModule } from './group-chat-routing.module';\n\nimport { GroupChatPage } from './group-chat.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    GroupChatPageRoutingModule\n  ],\n  declarations: [GroupChatPage]\n})\nexport class GroupChatPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BhZ2VzL2dyb3VwLWNoYXQvZ3JvdXAtY2hhdC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ChatService } from 'src/app/Services/chat.service';\nimport { forkJoin, Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { take, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-group-chat',\n  templateUrl: './group-chat.page.html',\n  styleUrls: ['./group-chat.page.scss'],\n})\nexport class GroupChatPage implements OnInit {\n  \n  constructor(\n    public chatService: ChatService,\n    public db: AngularFirestore,\n    private router: Router\n  ) { }\n\n  listOfUsers = [];\n  currentUserEmail = this.chatService.currentUser.email;\n  listOfGroups = this.chatService.listOfGroups;\n  listOfGroups2 = [];\n  currentFirebaseUserId = this.chatService.currentUserIdFromFireabase;\n  titleCheck = '';\n  groupId: any;\n  participant = '';\n  users = [];\n\n  ngOnInit() {\n    console.log(\"check firebase user id set from home page here =\"+this.currentFirebaseUserId);\n    //checking or creating a user account for currenlty logged in user\n    //if user exists, then load groups in which this user participates\n    // this.checkOrCreateUserInFirebase();\n\n\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers().subscribe(result => {\n      // console.log(\"getting list of all users\");\n      result.forEach(r => {\n        if(r.payload.doc.data()['email'] != this.chatService.currentUser.email) {\n          this.listOfUsers.push(r);\n        }\n      });   \n    });\n\n\n    //get all groups for group chats\n    this.listOfGroups2 = [];\n    this.chatService.getAllGroups2().subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          // console.log(\"id of these groups =\");\n          // console.log(r.payload.doc.id);\n          this.listOfGroups2.push(r);\n        }\n      });   \n    }); \n\n\n  }\n\n   //swipe down to refresh\n   doRefresh(event) {\n    console.log('Begin async operation');\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers().subscribe(result => {\n      // console.log(\"getting list of all users\");\n      result.forEach(r => {\n        if(r.payload.doc.data()['email'] != this.chatService.currentUser.email) {\n          this.listOfUsers.push(r);\n        }\n      });   \n    });\n\n\n    //get all groups for group chats\n    this.listOfGroups2 = [];\n    this.chatService.getAllGroups2().subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          // console.log(\"id of these groups =\");\n          // console.log(r.payload.doc.id);\n          this.listOfGroups2.push(r);\n        }\n      });   \n    }); \n\n    setTimeout(() => {\n      console.log('Async operation has ended');\n      event.target.complete();\n    }, 2000);\n  }\n\n\n\n\n  GroupChat(id,title) {\n    // console.log(\"group id passed =\"+id);\n    // console.log(\"current user's id in firebase =\"+this.currentFirebaseUserId);\n    let obs2 = this.chatService.findGroupById(id);\n    forkJoin(obs2).subscribe(res => {\n      // console.log(\"res\");\n      // console.log(res);\n      for(let data of res){\n        // console.log(\"data\");\n        // console.log(data.payload.id);\n        this.router.navigateByUrl(`/chat/${data.payload.id}`);\n        //use following if passing 2 parameters\n        // this.router.navigateByUrl(`/chat/${data.payload.id}/${this.currentFirebaseUserId}`);\n      }\n      // for (let data of res) {\n      //   if (data.length > 0) {\n      //     console.log(\"found an existing group with this group id =\"+data[0].id);\n      //     this.groupId = data[0].id;\n      //     this.router.navigateByUrl(`/chat/${this.groupId}`);\n      //   }\n      // }\n    });\n  }\n\n  //---------one on one chat\n  oneOnOneChat(email1,userName2) {\n    //creating group name--------------------------------- stored in this.titleCheck (ordered alphabatically from both users' nickname)\n    let userName1 = this.chatService.currentUser.userName;\n    let x = userName1.localeCompare(userName2, undefined, {numeric: true, sensitivity: 'base'});\n    if(x==-1){\n      // console.log(\"userName1 will come first\");\n      this.titleCheck = 'oOc_'+userName1 +'&'+ userName2;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    } else {\n      // console.log(\"userName2 will come first\");\n      this.titleCheck = 'oOc_'+userName2 +'&'+ userName1;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    }\n\n    let obs1 = this.findGroup(this.titleCheck);\n    forkJoin(obs1).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          console.log(\"found an existing group with this group id =\"+data[0].id);\n          this.groupId = data[0].id;\n          this.router.navigateByUrl(`/chat/${this.groupId}`);\n        }\n        else {\n          console.log(\"group not found--in create group section\");   //group not available--create group\n          setTimeout(() => {\n            this.addUser(email1);\n            console.log(this.users);\n            // this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup\n          }, 1000);\n          setTimeout(() => {\n            this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup()\n          \n          }, 2000);\n        }\n      }\n    });\n  }\n\n\n  findGroup(title) {\n    let group = this.db.collection('groupsTaskTracker', ref => \n      ref.where('title', '==', title)).valueChanges({ idField: 'id' }).pipe(\n      take(1)\n    );\n    return group;\n  }\n\n  addUser(participant1) {\n    this.participant = participant1;\n    let obs = this.chatService.findUser(this.participant);\n    forkJoin(obs).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          if(this.users.indexOf(data[0]) > -1) {\n          } else {\n            this.users.push(data[0]);\n          }\n        }\n      }\n      this.participant = '';\n    });\n  }\n\n  readyToCreateOneOnOneGroup() {\n    this.createGroup(this.titleCheck, this.users).then(res => {\n      console.log(\"group created\");\n      // this.router.navigateByUrl('/chats');\n      this.router.navigateByUrl(`/chat/${this.groupId}`);\n    });\n    this.users = [];\n  }\n\n  createGroup(title, users) {\n    let current = {\n      email: this.chatService.currentUser.email,\n      id: this.chatService.currentUserIdFromFireabase,\n      userName: this.chatService.currentUser.userName\n    };\n    let allUsers = [current];\n    allUsers.push(...users);\n    return this.db.collection('groupsTaskTracker').add({\n      title: title,\n      type: 'OneOnOne',\n      users: allUsers\n    }).then(res => {\n      // console.log(\"new group's id =\"+res.id);\n      this.groupId = res.id;\n      let promises = [];\n      for (let usr of allUsers) {\n        let oneAdd = this.db.collection(`usersTaskTracker/${usr.id}/groups`).add({\n          id: res.id,\n          type: 'OneOnOne'\n        });\n        promises.push(oneAdd);\n      }\n      return Promise.all(promises);\n    })\n  }\n\n\n\n\n\n\n}\n"],"sourceRoot":"webpack:///"}