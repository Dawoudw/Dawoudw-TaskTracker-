{"version":3,"sources":["./src/app/Services/chat.service.ts"],"names":[],"mappings":"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","file":"default~Pages-chat-chat-module~Pages-start-chat-start-chat-module~group-chat-group-chat-module~home-~d4eeb33b.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { UsersService } from \"src/app/Services/users.service\";\nimport { AuthService } from \"src/app/Services/authService.service\";\nimport { User } from \"../Models/user\";\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireStorage, AngularFireStorageReference } from '@angular/fire/storage';\nimport { forkJoin, Observable } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n// import { firebase } from '@firebase/app';\nimport * as firebase from 'firebase/app';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  constructor(\n    public usrServ: UsersService,\n    private auth: AuthService,\n    public db: AngularFirestore,\n    private storage: AngularFireStorage\n  ) { }\n\n  usersList = this.usrServ.usersList;\n  currentUser = this.auth.getLoggedUser();\n  listOfGroups = [];\n  currentUserIdFromFirebaseSetFromHomePage = '';\n  currentUserIdFromFireabase = JSON.parse(localStorage.getItem(\"clientIdFirebase\"));\n\n  fromChatService() {\n    console.log(\"fromChatService\");\n    console.log(this.usersList);\n    this.usrServ.usersList.forEach ( user => {\n      console.log(\"user\");\n      console.log(user['email']);\n    })\n  }\n\n  getAllUsers(){\n    return this.db.collection('usersTaskTracker').snapshotChanges();\n  }\n\n  \n\n  // getAllGroups(){\n  //   console.log(\"in getAllGroups\");\n  //   console.log(this.currentUser.email);\n  //   console.log(\"current user's id from firebase =\"+this.currentUserIdFromFirebase);\n  //   let currentUserIdFromFirebase = '';\n  //   let userObservable = this.findUser(this.currentUser.email);\n  //   forkJoin(userObservable).subscribe(res => {\n  //     for (let data of res) {\n  //       if (data.length > 0) {\n  //         // console.log(\"found an existing user with this user id =\"+data[0].id);\n  //         currentUserIdFromFirebase = data[0].id;\n  //         console.log(\"currentUserIdFromFirebase\");\n  //         console.log(currentUserIdFromFirebase);\n  //         // this.groupId = data[0].id;\n  //         // this.router.navigateByUrl(`/chat/${this.groupId}`);\n  //       }\n  //     }\n  //   });\n  //   console.log(\"before error\");\n  //   // setTimeout(() => {\n  //     console.log(currentUserIdFromFirebase);\n  //     return this.db.collection(`usersTaskTracker/${currentUserIdFromFirebase}/groups`).snapshotChanges();\n  //   // }, 2000);\n    \n    \n  // }\n\n  getCurrentUser() {\n    console.log(\"currentUser =\"+this.currentUser);\n    console.log(\"current user's email =\"+this.currentUser.email);\n    console.log(\"firebase id for this user\");\n    \n  }\n\n\n\n  // checkOrCreateUserInFirebase() {\n  //   //for checking if users exists in firebase collection \"usersTaskTracker\"\n  //   //if a user is found, then load groups for group chat for that user\n  //   let userObservable = this.findUser(this.currentUser.email);\n  //   forkJoin(userObservable).subscribe(res => {\n  //     for (let data of res) {\n  //       if (data.length > 0) {\n  //         // console.log(\"found an existing user with this user id =\"+data[0].id);\n  //         this.currentUserIdFromFirebase = data[0].id;\n  //         // this.groupId = data[0].id;\n  //         // this.router.navigateByUrl(`/chat/${this.groupId}`);\n          \n  //         //getting list of groups\n  //         this.listOfGroups = [];\n  //         this.getAllGroups(this.currentUserIdFromFirebase)\n  //           .subscribe(result => {\n  //             result.forEach(r => {\n  //               if(r.payload.doc.data()['type'] == 'group') {\n  //                 console.log(\"id of these groups =\");\n  //                 console.log(r.payload.doc.id);\n  //                 this.listOfGroups.push(r);\n  //               }\n  //             });   \n  //         });      \n\n\n  //       }\n  //       else {\n  //         //User not found in firebase collection \"usersTaskTracker\"--creating the user\n  //         console.log(\"user not found in firebase--in create user section\");\n  //         this.db.collection('usersTaskTracker').add({\n  //           email: this.currentUser.email,\n  //           userId: this.currentUser.userId,\n  //           userName: this.currentUser.userName,\n  //           avatar: this.currentUser.avatar\n  //         });\n  //       }\n  //     }\n  //   });\n  // }\n\n  findUser(email) {\n    let user = this.db.collection('usersTaskTracker', ref => \n      ref.where('email', '==', email)).valueChanges({ idField: 'id' }).pipe(\n      take(1)\n    );\n    return user;\n  }\n\n  // getAllGroups(id){\n  //   console.log(\"id received ===\"+id);\n  //   return this.db.collection(`usersTaskTracker/${id}/groups`).snapshotChanges();\n  // }\n\n  getAllGroups2(){\n    return this.db.collection(`usersTaskTracker/${this.currentUserIdFromFirebaseSetFromHomePage}/groups`).snapshotChanges();\n  }\n\n  createGroup(title, users) {\n    let current = {\n      email: this.currentUser.email,\n      id: this.currentUserIdFromFirebaseSetFromHomePage,\n      userName: this.currentUser.userName\n    };\n    // console.log(\"additional user(s) is/are: \");\n    // console.log(users);\n    let allUsers = [current];\n    allUsers.push(...users);\n    // console.log(\"allUsers for group chat\");\n    // console.log(allUsers);\n\n    return this.db.collection('groupsTaskTracker').add({\n      title: title,\n      type: 'group',\n      users: allUsers\n    }).then(res => {\n      let promises = [];\n      for (let usr of allUsers) {\n        console.log(\"usr\");\n        console.log(usr);\n        console.log(\"usr.id\");\n        console.log(usr.id);\n        console.log(\"res.id\");\n        console.log(res.id);\n        let oneAdd = this.db.collection(`usersTaskTracker/${usr.id}/groups`).add({\n          id: res.id,\n          title: title,\n          users: allUsers.length,\n          type: 'group'\n        });\n        promises.push(oneAdd);\n      }\n      return Promise.all(promises);\n    })\n  }\n\n  findGroupById(id) {\n    let group = this.db.doc(`groupsTaskTracker/${id}`).snapshotChanges().pipe(\n      take(1)\n    );\n    return group;\n  }\n\n\n  getOneGroup(id,user_group_key = null) {\n    // console.log(\"firebase created current user's id\");\n    // console.log(this.auth.currentUserId);\n    return this.db.doc(`groupsTaskTracker/${id}`).snapshotChanges().pipe(\n      take(1),\n      map(changes => {\n        let count = 0;\n        const data = changes.payload.data();\n        this.db.collection(`groupsTaskTracker/${id}/messages`).snapshotChanges().\n        forEach(result => {\n          result.forEach (r => {\n            // console.log(\"r =\"+r);\n            //Get firebase created id of each messsage: r.payload.doc.id\n            const mId = r.payload.doc.id;\n            const uId = r.payload.doc.data()['from'];\n            // setTimeout(() => {\n            //   // console.log(\"mId =\"+mId);\n            // }, 1000);\n            if((r.payload.doc.data()['readFlag'] == false) && (uId != this.currentUserIdFromFirebaseSetFromHomePage)) {\n              count = count+1;\n            }\n          });\n        });\n\n        const group_id = changes.payload.id;\n        // console.log(\"count\");\n        // console.log(count);\n        return { user_group_key, id: group_id, ...data as {} };\n      })\n    )      \n  }\n\n  getChatMessages(groupId) {\n    let count = 0;\n\n    return this.db.collection(`groupsTaskTracker/${groupId}/messages`, ref => ref.orderBy('createdAt')).snapshotChanges().pipe(\n      map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return { id, ...data as {} };\n      }))\n    );\n  }\n\n\n  addChatMessage(msg, chatId) {\n    return this.db.collection('groupsTaskTracker/' + chatId + '/messages').add({\n      msg: msg,\n      from: this.currentUserIdFromFirebaseSetFromHomePage,\n      readFlag: false,\n      unreadCount: 0,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n  addFileMessage(file, chatId) {\n    let newName = `${new Date().getTime()}-${this.currentUserIdFromFirebaseSetFromHomePage}.png`;\n    let storageRef: AngularFireStorageReference = this.storage.ref(`/files/${chatId}/${newName}`);\n\n    return {\n      task: storageRef.putString(file, 'base64', { contentType: 'image/png' }), \n      ref: storageRef\n    };\n  }\n\n  saveFileMessage(filepath, chatId) {\n    return this.db.collection('groupsTaskTracker/' + chatId + '/messages').add({\n      file: filepath,\n      from: this.currentUserIdFromFirebaseSetFromHomePage,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp()\n    });\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n"],"sourceRoot":"webpack:///"}