{"version":3,"sources":["webpack:///src/app/Pages/group-chat/group-chat.page.html","webpack:///src/app/Pages/group-chat/group-chat-routing.module.ts","webpack:///src/app/Pages/group-chat/group-chat.module.ts","webpack:///src/app/Pages/group-chat/group-chat.page.scss","webpack:///src/app/Pages/group-chat/group-chat.page.ts"],"names":["routes","path","component","GroupChatPageRoutingModule","imports","forChild","exports","GroupChatPageModule","declarations","GroupChatPage","chatService","db","router","listOfUsers","currentUserEmail","currentUser","email","listOfGroups","listOfGroups2","currentFirebaseUserId","currentUserIdFromFireabase","titleCheck","participant","users","console","log","getAllUsers","subscribe","result","forEach","r","payload","doc","data","push","getAllGroups2","event","setTimeout","target","complete","id","title","obs2","findGroupById","res","navigateByUrl","email1","userName2","userName1","userName","x","localeCompare","undefined","numeric","sensitivity","obs1","findGroup","length","groupId","addUser","readyToCreateOneOnOneGroup","group","collection","ref","where","valueChanges","idField","pipe","participant1","obs","findUser","indexOf","createGroup","then","current","allUsers","add","type","promises","usr","oneAdd","Promise","all","selector","template"],"mappings":"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","file":"group-chat-group-chat-module-es5.js","sourcesContent":["export default \"\\n<ion-content>\\n  <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n    <ion-refresher-content\\n      pullingIcon=\\\"arrow-down-outline\\\"\\n      pullingText=\\\"Pull to refresh\\\"\\n      refreshingSpinner=\\\"dots\\\"\\n      refreshingText=\\\"Refreshing...\\\">\\n    </ion-refresher-content>\\n  </ion-refresher>\\n\\n<ion-item-divider>\\n  <ion-label>\\n    Signed in as: {{ currentUserEmail }}\\n  </ion-label>\\n</ion-item-divider>\\n\\n  <!-- Showing Groups created using \\\"Create A Group Button\\\" -->\\n  <ion-item-divider *ngIf=\\\"listOfGroups2.length!=0\\\">\\n    <ion-label>Your Groups</ion-label>\\n  </ion-item-divider>\\n  <ion-item button *ngFor=\\\"let item of listOfGroups2;\\\"\\n    (click)=\\\"GroupChat(item.payload.doc.data().id,item.payload.doc.data().title)\\\"\\n  >\\n    <ion-label class=\\\"ion-text-wrap\\\">\\n      <ion-text color=\\\"primary\\\">\\n        <h3>{{ item.payload.doc.data().title }}</h3>\\n        </ion-text>\\n        <p>{{ item.payload.doc.data().users}} Users</p>\\n        <!-- <p>Group id: {{ item.payload.doc.data().id }}</p> -->\\n    </ion-label>\\n  </ion-item>\\n\\n\\n\\n<ion-item-divider>\\n  <ion-label>\\n    Contacts (All Available Users)\\n  </ion-label>\\n</ion-item-divider>\\n<ion-item button *ngFor=\\\"let item of listOfUsers;\\\"  (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().userName)\\\">\\n  <ion-label>\\n    {{ item.payload.doc.data().email }}\\n    <p>{{ item.payload.doc.data().userName }}</p>\\n  </ion-label>\\n  <!-- Keep either a button or a routerlink--both togather will not work -->\\n  <!-- <ion-button icon-only (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().nickname)\\\">\\n    <ion-icon name=\\\"chatbubble-outline\\\"></ion-icon>\\n  </ion-button> -->\\n  <!-- <ion-button icon-only>\\n    <ion-icon name=\\\"call-outline\\\"></ion-icon>\\n  </ion-button> -->\\n</ion-item>\\n\\n\\n\\n\\n\\n</ion-content>\\n\\n<ion-footer>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-button color=\\\"light\\\" fill=\\\"clear\\\" expand=\\\"full\\\" routerLink=\\\"/start-chat\\\">Create a new Group</ion-button>\\n  </ion-toolbar>\\n</ion-footer>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { GroupChatPage } from './group-chat.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GroupChatPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class GroupChatPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { GroupChatPageRoutingModule } from './group-chat-routing.module';\n\nimport { GroupChatPage } from './group-chat.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    GroupChatPageRoutingModule\n  ],\n  declarations: [GroupChatPage]\n})\nexport class GroupChatPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BhZ2VzL2dyb3VwLWNoYXQvZ3JvdXAtY2hhdC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { ChatService } from 'src/app/Services/chat.service';\nimport { forkJoin, Observable } from 'rxjs';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { take, map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-group-chat',\n  templateUrl: './group-chat.page.html',\n  styleUrls: ['./group-chat.page.scss'],\n})\nexport class GroupChatPage implements OnInit {\n  \n  constructor(\n    public chatService: ChatService,\n    public db: AngularFirestore,\n    private router: Router\n  ) { }\n\n  listOfUsers = [];\n  currentUserEmail = this.chatService.currentUser.email;\n  listOfGroups = this.chatService.listOfGroups;\n  listOfGroups2 = [];\n  currentFirebaseUserId = this.chatService.currentUserIdFromFireabase;\n  titleCheck = '';\n  groupId: any;\n  participant = '';\n  users = [];\n\n  ngOnInit() {\n    console.log(\"check firebase user id set from home page here =\"+this.currentFirebaseUserId);\n    //checking or creating a user account for currenlty logged in user\n    //if user exists, then load groups in which this user participates\n    // this.checkOrCreateUserInFirebase();\n\n\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers().subscribe(result => {\n      // console.log(\"getting list of all users\");\n      result.forEach(r => {\n        if(r.payload.doc.data()['email'] != this.chatService.currentUser.email) {\n          this.listOfUsers.push(r);\n        }\n      });   \n    });\n\n\n    //get all groups for group chats\n    this.listOfGroups2 = [];\n    this.chatService.getAllGroups2().subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          // console.log(\"id of these groups =\");\n          // console.log(r.payload.doc.id);\n          this.listOfGroups2.push(r);\n        }\n      });   \n    }); \n\n\n  }\n\n   //swipe down to refresh\n   doRefresh(event) {\n    console.log('Begin async operation');\n    //this gets a list of all users\n    this.listOfUsers = [];\n    this.chatService.getAllUsers().subscribe(result => {\n      // console.log(\"getting list of all users\");\n      result.forEach(r => {\n        if(r.payload.doc.data()['email'] != this.chatService.currentUser.email) {\n          this.listOfUsers.push(r);\n        }\n      });   \n    });\n\n\n    //get all groups for group chats\n    this.listOfGroups2 = [];\n    this.chatService.getAllGroups2().subscribe(result => {\n      result.forEach(r => {\n        if(r.payload.doc.data()['type'] == 'group') {\n          // console.log(\"id of these groups =\");\n          // console.log(r.payload.doc.id);\n          this.listOfGroups2.push(r);\n        }\n      });   \n    }); \n\n    setTimeout(() => {\n      console.log('Async operation has ended');\n      event.target.complete();\n    }, 2000);\n  }\n\n\n\n\n  GroupChat(id,title) {\n    // console.log(\"group id passed =\"+id);\n    // console.log(\"current user's id in firebase =\"+this.currentFirebaseUserId);\n    let obs2 = this.chatService.findGroupById(id);\n    forkJoin(obs2).subscribe(res => {\n      // console.log(\"res\");\n      // console.log(res);\n      for(let data of res){\n        // console.log(\"data\");\n        // console.log(data.payload.id);\n        this.router.navigateByUrl(`/chat/${data.payload.id}`);\n        //use following if passing 2 parameters\n        // this.router.navigateByUrl(`/chat/${data.payload.id}/${this.currentFirebaseUserId}`);\n      }\n      // for (let data of res) {\n      //   if (data.length > 0) {\n      //     console.log(\"found an existing group with this group id =\"+data[0].id);\n      //     this.groupId = data[0].id;\n      //     this.router.navigateByUrl(`/chat/${this.groupId}`);\n      //   }\n      // }\n    });\n  }\n\n  //---------one on one chat\n  oneOnOneChat(email1,userName2) {\n    //creating group name--------------------------------- stored in this.titleCheck (ordered alphabatically from both users' nickname)\n    let userName1 = this.chatService.currentUser.userName;\n    let x = userName1.localeCompare(userName2, undefined, {numeric: true, sensitivity: 'base'});\n    if(x==-1){\n      // console.log(\"userName1 will come first\");\n      this.titleCheck = 'oOc_'+userName1 +'&'+ userName2;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    } else {\n      // console.log(\"userName2 will come first\");\n      this.titleCheck = 'oOc_'+userName2 +'&'+ userName1;\n      console.log(\"this.titlecheck =\"+this.titleCheck);\n    }\n\n    let obs1 = this.findGroup(this.titleCheck);\n    forkJoin(obs1).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          console.log(\"found an existing group with this group id =\"+data[0].id);\n          this.groupId = data[0].id;\n          this.router.navigateByUrl(`/chat/${this.groupId}`);\n        }\n        else {\n          console.log(\"group not found--in create group section\");   //group not available--create group\n          setTimeout(() => {\n            this.addUser(email1);\n            console.log(this.users);\n            // this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup\n          }, 1000);\n          setTimeout(() => {\n            this.readyToCreateOneOnOneGroup();\n          // this.groupId  is assigned with new group id in createGroup()\n          \n          }, 2000);\n        }\n      }\n    });\n  }\n\n\n  findGroup(title) {\n    let group = this.db.collection('groupsTaskTracker', ref => \n      ref.where('title', '==', title)).valueChanges({ idField: 'id' }).pipe(\n      take(1)\n    );\n    return group;\n  }\n\n  addUser(participant1) {\n    this.participant = participant1;\n    let obs = this.chatService.findUser(this.participant);\n    forkJoin(obs).subscribe(res => {\n      for (let data of res) {\n        if (data.length > 0) {\n          if(this.users.indexOf(data[0]) > -1) {\n          } else {\n            this.users.push(data[0]);\n          }\n        }\n      }\n      this.participant = '';\n    });\n  }\n\n  readyToCreateOneOnOneGroup() {\n    this.createGroup(this.titleCheck, this.users).then(res => {\n      console.log(\"group created\");\n      // this.router.navigateByUrl('/chats');\n      this.router.navigateByUrl(`/chat/${this.groupId}`);\n    });\n    this.users = [];\n  }\n\n  createGroup(title, users) {\n    let current = {\n      email: this.chatService.currentUser.email,\n      id: this.chatService.currentUserIdFromFireabase,\n      userName: this.chatService.currentUser.userName\n    };\n    let allUsers = [current];\n    allUsers.push(...users);\n    return this.db.collection('groupsTaskTracker').add({\n      title: title,\n      type: 'OneOnOne',\n      users: allUsers\n    }).then(res => {\n      // console.log(\"new group's id =\"+res.id);\n      this.groupId = res.id;\n      let promises = [];\n      for (let usr of allUsers) {\n        let oneAdd = this.db.collection(`usersTaskTracker/${usr.id}/groups`).add({\n          id: res.id,\n          type: 'OneOnOne'\n        });\n        promises.push(oneAdd);\n      }\n      return Promise.all(promises);\n    })\n  }\n\n\n\n\n\n\n}\n"]}