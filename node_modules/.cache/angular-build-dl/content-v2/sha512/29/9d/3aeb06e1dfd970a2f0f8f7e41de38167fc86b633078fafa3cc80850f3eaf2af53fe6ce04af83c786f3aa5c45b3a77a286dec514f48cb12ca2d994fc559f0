{"version":3,"sources":["webpack:///src/app/Pages/group-chat/group-chat.page.html","webpack:///src/app/Pages/group-chat/group-chat-routing.module.ts","webpack:///src/app/Pages/group-chat/group-chat.module.ts","webpack:///src/app/Pages/group-chat/group-chat.page.scss","webpack:///src/app/Pages/group-chat/group-chat.page.ts"],"names":["routes","path","component","GroupChatPageRoutingModule","imports","forChild","exports","GroupChatPageModule","declarations","GroupChatPage","chatService","db","navCtrl","listOfUsers","currentUserEmail","currentUser","email","listOfGroups","listOfGroups2","currentFirebaseUserId","currentUserIdFromFirebaseSetFromHomePage","titleCheck","participant","users","ngUnsubscribe","console","log","user","findUser","subscribe","result","id","setTimeout","getAllUsers","getAllUserGroups","Array","pipe","forEach","r","payload","doc","data","push","item","getAllGroups2","err","event","loading","errmessage","Promise","target","complete","error","title","obs2","findGroupById","res","navigateRoot","email1","userName2","userName1","userName","x","localeCompare","undefined","numeric","sensitivity","obs1","findGroup","length","groupId","addUser","readyToCreateOneOnOneGroup","group","collection","ref","where","valueChanges","idField","participant1","obs","indexOf","createGroup","then","current","allUsers","add","type","promises","usr","oneAdd","all","next","selector","template"],"mappings":"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","file":"group-chat-group-chat-module-es5.js","sourcesContent":["export default \"<!-- <ion-refresher slot=\\\"fixed\\\" (ionRefresh)=\\\"doRefresh($event)\\\">\\n  <ion-refresher-content\\n    pullingIcon=\\\"arrow-down-outline\\\"\\n    pullingText=\\\"Pull to refresh\\\"\\n    refreshingSpinner=\\\"dots\\\"\\n    refreshingText=\\\"Refreshing...\\\">\\n  </ion-refresher-content>\\n</ion-refresher> -->\\n\\n<ion-header class=\\\"ion-no-margin\\\">\\n  <ion-toolbar>\\n    <ion-segment\\n      style=\\\"width: 100%\\\"\\n      color=\\\"dark\\\"\\n      (ionChange)=\\\"0\\\"\\n      #checkTeam\\n      value=\\\"chat\\\"\\n    >\\n      <ion-segment-button size=\\\"small\\\" value=\\\"chat\\\" layout=\\\"icon-start\\\">\\n        <ion-label\\n          [color]=\\\"checkTeam.value=='chat' ? 'secondary' : ''\\\"\\n          position=\\\"float\\\"\\n          >Chat</ion-label\\n        >\\n        <ion-icon\\n          [color]=\\\"checkTeam.value=='chat' ? 'secondary' : ''\\\"\\n          name=\\\"chatbox-ellipses-outline\\\"\\n        ></ion-icon>\\n      </ion-segment-button>\\n\\n      <ion-segment-button size=\\\"small\\\" value=\\\"group\\\" layout=\\\"icon-start\\\">\\n        <ion-label\\n          [color]=\\\"checkTeam.value=='group' ? 'secondary' : ''\\\"\\n          position=\\\"float\\\"\\n          >Chat Groups</ion-label\\n        >\\n        <ion-icon\\n          [color]=\\\"checkTeam.value=='group' ? 'secondary' : ''\\\"\\n          src=\\\"../assets/images/chat-group.svg\\\"\\n        ></ion-icon>\\n      </ion-segment-button>\\n    </ion-segment>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content fullscreen>\\n  <ion-fab\\n    *ngIf=' checkTeam.value==\\\"group\\\" '\\n    vertical=\\\"top\\\"\\n    horizontal=\\\"end\\\"\\n    slot=\\\"fixed\\\"\\n  >\\n    <ion-fab-button\\n      routerLink=\\\"/tasktracker/start-chat\\\"\\n      size=\\\"small\\\"\\n      color=\\\"light\\\"\\n      class=\\\"ion-no-margin ion-no-padding\\\"\\n    >\\n      <ion-icon name=\\\"add\\\" color=\\\"primary\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n  <ion-grid *ngIf=' checkTeam.value==\\\"chat\\\" '>\\n    <ion-row class=\\\"ion-no-margin ; no-padding\\\">\\n      <ion-col size-med=\\\"6\\\" size-lg=\\\"6\\\" offset-med=\\\"3\\\" offset-lg=\\\"3\\\">\\n        <div\\n          class=\\\"ion-no-margin ; no-padding\\\"\\n          style=\\\"\\n            height: 0px;\\n            text-align: center !important;\\n            position: relative;\\n            z-index: 1;\\n          \\\"\\n        >\\n          <ion-refresher\\n            #refTeamProgress\\n            id=\\\"refTeamProgress\\\"\\n            style=\\\"position: relative; z-index: 2; top: 0px\\\"\\n            slot=\\\"fixed\\\"\\n            (ionRefresh)=\\\"doRefresh($event)\\\"\\n          >\\n            <ion-refresher-content color=\\\"primary\\\" refreshingSpinner=\\\"crescent\\\">\\n            </ion-refresher-content>\\n          </ion-refresher>\\n        </div>\\n        <ion-list *ngFor=\\\"let item of listOfUsers;\\\" name=\\\"lstusers\\\">\\n          <ion-row style=\\\"justify-items: left\\\">\\n            <ion-col>\\n              <ion-item\\n                detail=\\\"false\\\"\\n                (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().userName)\\\"\\n              >\\n                <ion-avatar slot=\\\"start\\\" name=\\\"avatar\\\">\\n                  <!-- <img src=\\\"../assets/images/avatar.svg\\\" /> -->\\n                  <text-avatar\\n                    text=\\\"{{item.payload.doc.data().userName}}\\\"\\n                  ></text-avatar>\\n                </ion-avatar>\\n                <ion-label\\n                  color=\\\"secondary\\\"\\n                  position=\\\"stacked\\\"\\n                  class=\\\"ion-text-start ion-text-capitalize\\\"\\n                >\\n                  {{ item.payload.doc.data().userName }}\\n                  <ion-label class=\\\"ion-no-margin ion-no-padding ion-text-wrap\\\">\\n                    <ion-note position=\\\"stacked\\\">\\n                      <small> {{ item.payload.doc.data().email }}</small>\\n                    </ion-note></ion-label\\n                  >\\n                </ion-label>\\n              </ion-item>\\n            </ion-col>\\n\\n            <ion-col size=\\\"auto\\\">\\n              <ion-icon\\n                (click)=\\\"oneOnOneChat(item.payload.doc.data().email,item.payload.doc.data().userName)\\\"\\n                color=\\\"primary\\\"\\n                name=\\\"chatbox-ellipses-outline\\\"\\n                style=\\\"\\n                  flex: left;\\n                  margin-top: 10px;\\n                  margin-left: 5px;\\n                  margin-right: 5px;\\n                  width: 20px;\\n                  height: 20px;\\n                \\\"\\n                class=\\\"ion-text-start\\\"\\n              ></ion-icon>\\n            </ion-col>\\n          </ion-row>\\n        </ion-list>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n  <ion-grid *ngIf=' checkTeam.value==\\\"group\\\" '>\\n    <ion-row>\\n      <ion-col>\\n        <ion-item-divider\\n          class=\\\"ion-no-margin ion-no-padding\\\"\\n          color=\\\"secondary\\\"\\n        >\\n          <ion-chip outline color=\\\"dark\\\">\\n            <ion-label color=\\\"dark\\\"> Your Chat Groups </ion-label>\\n          </ion-chip>\\n        </ion-item-divider>\\n\\n        <div\\n          class=\\\"ion-no-margin ion-no-padding\\\"\\n          style=\\\"\\n            height: 0px;\\n            text-align: center !important;\\n            position: relative;\\n            z-index: 1;\\n          \\\"\\n        >\\n          <ion-refresher\\n            #refTeamProgress2\\n            id=\\\"refTeamProgress\\\"\\n            style=\\\"position: relative; z-index: 2; top: 0px\\\"\\n            slot=\\\"fixed\\\"\\n            (ionRefresh)=\\\"doRefresh($event)\\\"\\n          >\\n            <ion-refresher-content color=\\\"primary\\\" refreshingSpinner=\\\"crescent\\\">\\n            </ion-refresher-content>\\n          </ion-refresher>\\n        </div>\\n        <ion-list>\\n          <ion-item\\n            button\\n            *ngFor=\\\"let item of listOfGroups2;\\\"\\n            (click)=\\\"GroupChat(item.payload.doc.data().id,item.payload.doc.data().title)\\\"\\n          >\\n            <ion-label class=\\\"ion-text-wrap\\\">\\n              <ion-text color=\\\"secondary\\\">\\n                <h3>{{ item.payload.doc.data().title }}</h3>\\n              </ion-text>\\n              <p>{{ item.payload.doc.data().users}} Users</p>\\n              <!-- <p>Group id: {{ item.payload.doc.data().id }}</p> -->\\n            </ion-label>\\n          </ion-item>\\n        </ion-list>\\n      </ion-col>\\n    </ion-row>\\n    <!-- <ion-footer>\\n      <ion-toolbar color=\\\"primary\\\">\\n        <ion-button\\n          color=\\\"light\\\"\\n          fill=\\\"clear\\\"\\n          expand=\\\"full\\\"\\n          routerLink=\\\"/start-chat\\\"\\n          >Start new Group</ion-button\\n        >\\n      </ion-toolbar>\\n    </ion-footer> -->\\n  </ion-grid>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { GroupChatPage } from './group-chat.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: GroupChatPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class GroupChatPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { GroupChatPageRoutingModule } from './group-chat-routing.module';\nimport{TextAvatarModule} from '../../directives/text-avatar.directive.module'\nimport { GroupChatPage } from './group-chat.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    GroupChatPageRoutingModule,\n    TextAvatarModule,\n  ],\n  declarations: [GroupChatPage]\n})\nexport class GroupChatPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BhZ2VzL2dyb3VwLWNoYXQvZ3JvdXAtY2hhdC5wYWdlLnNjc3MifQ== */\";","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ChatService } from \"src/app/Services/chat.service\";\nimport { forkJoin, Observable, Subject } from \"rxjs\";\nimport { AngularFirestore } from \"@angular/fire/firestore\";\nimport { take, map } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { NavController } from \"@ionic/angular\";\n\n@Component({\n  selector: \"app-group-chat\",\n  templateUrl: \"./group-chat.page.html\",\n  styleUrls: [\"./group-chat.page.scss\"],\n})\nexport class GroupChatPage implements OnDestroy, OnInit {\n  constructor(\n    public chatService: ChatService,\n    public db: AngularFirestore,\n    // private router: Router,\n    private navCtrl: NavController\n  ) {}\n\n  listOfUsers = []; //this list can show all groups using function getAllGroups() from chat service\n  currentUserEmail = this.chatService.currentUser.email;\n  listOfGroups = this.chatService.listOfGroups;\n  listOfGroups2 = [];\n  currentFirebaseUserId = this.chatService\n    .currentUserIdFromFirebaseSetFromHomePage;\n  // currentFirebaseUserId = this.chatService.currentUserIdFromFireabase;\n  titleCheck = \"\";\n  groupId: any;\n  participant = \"\";\n  users = [];\n  private ngUnsubscribe = new Subject();\n\n  ngOnInit() {\n    //getting firebase userid if not found\n    if(this.currentFirebaseUserId == null || this.currentFirebaseUserId == '') {\n      console.log(\"firebase userid not found\");\n      let user = this.chatService.findUser(this.currentUserEmail);\n      //console.log(user);  //observable\n      user.subscribe((result) => {\n        // console.log(\"firebase user id retrieved =\"+result[0].id);\n        this.chatService.currentUserIdFromFirebaseSetFromHomePage = result[0].id;\n        this.currentFirebaseUserId = result[0].id;\n      });\n    }\n    setTimeout(() => {\n      console.log(\n        \"check firebase user id here =\" +\n          this.currentFirebaseUserId\n      );\n      //this gets a list of all users\n      this.getAllUsers();\n      //this gets a list of all groups created by this user (groups for group chat only)\n      this.getAllUserGroups();\n    }, 2000);\n\n  }\n\n\n  getAllUsers() {\n    this.listOfUsers = new Array();\n    this.chatService.getAllUsers().pipe(take(1)).subscribe((result) => {\n      // console.log(\"getting list of all users\");\n      result.forEach((r) => {\n        if (\n          r.payload.doc.data()[\"email\"] != this.chatService.currentUser.email\n        ) {\n          this.listOfUsers.push(r);\n        }\n      });\n    });\n  }\n  getAllUserGroups() {\n    try {\n     //get all groups for group chats\n      this.listOfGroups2 = new Array();\n      // console.log(\"listOfGroups2 =\");\n      // console.log(this.listOfGroups2);\n\n      this.listOfGroups2.forEach((item) =>{\n        // console.log(\"item\");\n        // console.log(item.payload.doc.data());\n      });\n      this.chatService.getAllGroups2().pipe(take(1)).subscribe((result) => {\n        result.forEach((r) => {\n          if (r.payload.doc.data()[\"type\"] == \"group\") {\n            // console.log(\"group id=\"+r.payload.doc.id);\n              // if(this.listOfGroups2.find(item =>item.payload.doc.data()['id'] == r.payload.doc.id)) {\n              //   console.log(\"found similar id =\"+r.payload.doc.id);\n              // } else {\n              //   console.log(\"not found...pushing...\");\n              //    this.listOfGroups2.push(r);\n              // }\n            this.listOfGroups2.push(r);\n          }\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n  }\n\n  //swipe down to refresh\n  loading: boolean;\n  async doRefresh(event) {\n    this.loading = true;\n    let errmessage = \"\";\n    await new Promise(() => {\n      console.log(\"Begin async operation\");\n      setTimeout(() => {\n        try {\n          this.getAllUsers();\n          this.getAllUserGroups();\n          console.log(\"Async operation has ended\");\n          event.target.complete();\n          this.loading = false;\n        } catch (err) {\n          this.loading = false;\n          console.log(err);\n        }\n      }, 2000);\n    }).catch((error) => console.log(error));\n  }\n  GroupChat(id, title) {\n    // console.log(\"group id passed =\"+id);\n    // console.log(\"current user's id in firebase =\"+this.currentFirebaseUserId);\n    let obs2 = this.chatService.findGroupById(id);\n    forkJoin(obs2).subscribe((res) => {\n      // console.log(\"res\");\n      // console.log(res);\n      for (let data of res) {\n        // console.log(\"data\");\n        // console.log(data.payload.id);\n        this.navCtrl.navigateRoot(`/chat/${data.payload.id}`);\n        //use following if passing 2 parameters\n        // this.router.navigateByUrl(`/chat/${data.payload.id}/${this.currentFirebaseUserId}`);\n      }\n      // for (let data of res) {\n      //   if (data.length > 0) {\n      //     console.log(\"found an existing group with this group id =\"+data[0].id);\n      //     this.groupId = data[0].id;\n      //     this.router.navigateByUrl(`/chat/${this.groupId}`);\n      //   }\n      // }\n    });\n  }\n\n  //---------one on one chat\n  oneOnOneChat(email1, userName2) {\n    //creating group name--------------------------------- stored in this.titleCheck (ordered alphabatically from both users' nickname)\n    let userName1 = this.chatService.currentUser.userName;\n    let x = userName1.localeCompare(userName2, undefined, {\n      numeric: true,\n      sensitivity: \"base\",\n    });\n    if (x == -1) {\n      // console.log(\"userName1 will come first\");\n      this.titleCheck = \"oOc_\" + userName1 + \"&\" + userName2;\n      console.log(\"this.titlecheck =\" + this.titleCheck);\n    } else {\n      // console.log(\"userName2 will come first\");\n      this.titleCheck = \"oOc_\" + userName2 + \"&\" + userName1;\n      console.log(\"this.titlecheck =\" + this.titleCheck);\n    }\n\n    let obs1 = this.findGroup(this.titleCheck);\n    forkJoin(obs1).subscribe((res) => {\n      for (let data of res) {\n        if (data.length > 0) {\n          console.log(\n            \"found an existing group with this group id =\" + data[0].id\n          );\n          this.groupId = data[0].id;\n          this.navCtrl.navigateRoot(`/chat/${this.groupId}`);\n        } else {\n          console.log(\"group not found--in create group section\"); //group not available--create group\n          setTimeout(() => {\n            this.addUser(email1);\n            console.log(this.users);\n            // this.readyToCreateOneOnOneGroup();\n            // this.groupId  is assigned with new group id in createGroup\n          }, 1000);\n          setTimeout(() => {\n            this.readyToCreateOneOnOneGroup();\n            // this.groupId  is assigned with new group id in createGroup()\n          }, 2000);\n        }\n      }\n    });\n  }\n\n  findGroup(title) {\n    let group = this.db\n      .collection(\"groupsTaskTracker\", (ref) => ref.where(\"title\", \"==\", title))\n      .valueChanges({ idField: \"id\" })\n      .pipe(take(1));\n    return group;\n  }\n\n  addUser(participant1) {\n    this.participant = participant1;\n    let obs = this.chatService.findUser(this.participant);\n    forkJoin(obs).subscribe((res) => {\n      for (let data of res) {\n        if (data.length > 0) {\n          if (this.users.indexOf(data[0]) > -1) {\n          } else {\n            this.users.push(data[0]);\n          }\n        }\n      }\n      this.participant = \"\";\n    });\n  }\n\n  readyToCreateOneOnOneGroup() {\n    this.createGroup(this.titleCheck, this.users).then((res) => {\n      console.log(\"group created\");\n      // this.router.navigateByUrl('/chats');\n      this.navCtrl.navigateRoot(`/chat/${this.groupId}`);\n    });\n    this.users = [];\n  }\n\n  createGroup(title, users) {\n    let current = {\n      email: this.chatService.currentUser.email,\n      id: this.chatService.currentUserIdFromFirebaseSetFromHomePage,\n      userName: this.chatService.currentUser.userName,\n    };\n    let allUsers = [current];\n    allUsers.push(...users);\n    return this.db\n      .collection(\"groupsTaskTracker\")\n      .add({\n        title: title,\n        type: \"OneOnOne\",\n        users: allUsers,\n      })\n      .then((res) => {\n        // console.log(\"new group's id =\"+res.id);\n        this.groupId = res.id;\n        let promises = [];\n        for (let usr of allUsers) {\n          let oneAdd = this.db\n            .collection(`usersTaskTracker/${usr.id}/groups`)\n            .add({\n              id: res.id,\n              type: \"OneOnOne\",\n            });\n          promises.push(oneAdd);\n        }\n        return Promise.all(promises);\n      });\n  }\n\n  ngOnDestroy() {\n    console.log(\"ngOnDestroy() executed\");\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n}\n"]}