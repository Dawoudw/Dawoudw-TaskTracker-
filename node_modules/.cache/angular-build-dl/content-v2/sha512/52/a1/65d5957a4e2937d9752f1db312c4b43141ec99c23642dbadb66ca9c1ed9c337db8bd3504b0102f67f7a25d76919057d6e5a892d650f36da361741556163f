{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/button-active-0d5784f9.js","./node_modules/@ionic/core/dist/esm/framework-delegate-d1eb6504.js","./node_modules/@ionic/core/dist/esm/haptic-7b8ba70a.js","./node_modules/@ionic/core/dist/esm/spinner-configs-c78e170e.js","./node_modules/@ionic/core/dist/esm/theme-3f0b0c04.js","./src/app/Pages/user-tasks/user-tasks.page.html","./src/app/Models/user-progress.ts","./src/app/Models/user.ts","./src/app/Pages/user-tasks/user-tasks.page.scss","./src/app/Pages/user-tasks/user-tasks.page.ts","./src/app/Services/data-service.service.ts","./src/app/Services/event-service.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACD;AACmE;;AAEvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wEAAa;AACxB;AACA;AACA;AACA,uEAAuE,qDAAoB;AAC3F,sEAAsE,qDAAsB;AAC5F;AACA;AACA,YAAY,6DAAkB;AAC9B;AACA;AACA,KAAK;AACL;;AAE0C;;;;;;;;;;;;;AC/D1C;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsD;;;;;;;;;;;;;ACjCtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,KAAK;AACL;AACA,qBAAqB,iBAAiB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEoI;;;;;;;;;;;;;ACzGpI;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,sCAAsC,mBAAmB;AACzD;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wCAAwC,sCAAsC;AAC9E,sCAAsC,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEyB;;;;;;;;;;;;;AC7GzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,MAAM;AAC5B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEqF;;;;;;;;;;;;;ACzCrF;AAAe,4lBAA6hB,eAAe,wXAAwX,qBAAqB,yNAAyN,sBAAsB,6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","file":"common-es2015.js","sourcesContent":["import { c as writeTask } from './index-44bf8136.js';\nimport { createGesture } from './index-eea61379.js';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n    let currentTouchedButton;\n    let initialTouchedButton;\n    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const target = document.elementFromPoint(x, y);\n        if (!target || !isButton(target)) {\n            clearActiveButton();\n            return;\n        }\n        if (target !== currentTouchedButton) {\n            clearActiveButton();\n            setActiveButton(target, hapticFeedbackFn);\n        }\n    };\n    const setActiveButton = (button, hapticFeedbackFn) => {\n        currentTouchedButton = button;\n        if (!initialTouchedButton) {\n            initialTouchedButton = currentTouchedButton;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.add('ion-activated'));\n        hapticFeedbackFn();\n    };\n    const clearActiveButton = (dispatchClick = false) => {\n        if (!currentTouchedButton) {\n            return;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.remove('ion-activated'));\n        /**\n         * Clicking on one button, but releasing on another button\n         * does not dispatch a click event in browsers, so we\n         * need to do it manually here. Some browsers will\n         * dispatch a click if clicking on one button, dragging over\n         * another button, and releasing on the original button. In that\n         * case, we need to make sure we do not cause a double click there.\n         */\n        if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n            currentTouchedButton.click();\n        }\n        currentTouchedButton = undefined;\n    };\n    return createGesture({\n        el,\n        gestureName: 'buttonActiveDrag',\n        threshold: 0,\n        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n        onEnd: () => {\n            clearActiveButton(true);\n            hapticSelectionEnd();\n            initialTouchedButton = undefined;\n        }\n    });\n};\n\nexport { createButtonActiveGesture as c };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n","const HapticEngine = {\n    getEngine() {\n        const win = window;\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\n    },\n    available() {\n        return !!this.getEngine();\n    },\n    isCordova() {\n        return !!window.TapticEngine;\n    },\n    isCapacitor() {\n        const win = window;\n        return !!win.Capacitor;\n    },\n    impact(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.impact({ style });\n    },\n    notification(options) {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n        engine.notification({ style });\n    },\n    selection() {\n        this.impact({ style: 'light' });\n    },\n    selectionStart() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionStart();\n        }\n        else {\n            engine.gestureSelectionStart();\n        }\n    },\n    selectionChanged() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionChanged();\n        }\n        else {\n            engine.gestureSelectionChanged();\n        }\n    },\n    selectionEnd() {\n        const engine = this.getEngine();\n        if (!engine) {\n            return;\n        }\n        if (this.isCapacitor()) {\n            engine.selectionEnd();\n        }\n        else {\n            engine.gestureSelectionEnd();\n        }\n    }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n    HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };\n","const spinners = {\n    'bubbles': {\n        dur: 1000,\n        circles: 9,\n        fn: (dur, index, total) => {\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            const angle = 2 * Math.PI * index / total;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circles': {\n        dur: 1000,\n        circles: 8,\n        fn: (dur, index, total) => {\n            const step = index / total;\n            const animationDelay = `${(dur * step) - dur}ms`;\n            const angle = 2 * Math.PI * step;\n            return {\n                r: 5,\n                style: {\n                    'top': `${9 * Math.sin(angle)}px`,\n                    'left': `${9 * Math.cos(angle)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'circular': {\n        dur: 1400,\n        elmDuration: true,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 20,\n                cx: 48,\n                cy: 48,\n                fill: 'none',\n                viewBox: '24 24 48 48',\n                transform: 'translate(0,0)',\n                style: {}\n            };\n        }\n    },\n    'crescent': {\n        dur: 750,\n        circles: 1,\n        fn: () => {\n            return {\n                r: 26,\n                style: {}\n            };\n        }\n    },\n    'dots': {\n        dur: 750,\n        circles: 3,\n        fn: (_, index) => {\n            const animationDelay = -(110 * index) + 'ms';\n            return {\n                r: 6,\n                style: {\n                    'left': `${9 - (9 * index)}px`,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 17,\n                y2: 29,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    },\n    'lines-small': {\n        dur: 1000,\n        lines: 12,\n        fn: (dur, index, total) => {\n            const transform = `rotate(${30 * index + (index < 6 ? 180 : -180)}deg)`;\n            const animationDelay = `${(dur * index / total) - dur}ms`;\n            return {\n                y1: 12,\n                y2: 20,\n                style: {\n                    'transform': transform,\n                    'animation-delay': animationDelay,\n                }\n            };\n        }\n    }\n};\nconst SPINNERS = spinners;\n\nexport { SPINNERS as S };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction, animation) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction, animation);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n","export default \"<ion-content>\\n  <ion-grid no-padding ion-no-margin>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\" size-lg=\\\"6\\\" offset-med=\\\"3\\\" offset-lg=\\\"3\\\">\\n        <ion-row>\\n          <ion-col size=\\\"12\\\">\\n            <ion-item>\\n              <ion-buttons slot=\\\"start\\\"  >\\n                <ion-back-button\\n                  text=\\\"\\\"\\n           \\n                  defaultHref=\\\"/users-progress\\\"\\n                ></ion-back-button>\\n              </ion-buttons>\\n\\n              <ion-label slot=\\\"\\\" color=\\\"primary\\\">\\n                <b> {{user.userName}}</b>\\n              </ion-label>\\n              <ion-avatar slot=\\\"start\\\" name=\\\"avatar\\\">\\n                <img src=\\\"../assets/avatar.svg\\\" />\\n              </ion-avatar>\\n            </ion-item>\\n          </ion-col> </ion-row\\n        ><ion-row>\\n          <ion-col size=\\\"auto\\\">\\n            <ion-chip outline color=\\\"primary\\\">\\n              <ion-label> Tasks <b>({{userProgress.length}}) </b></ion-label>\\n            </ion-chip>\\n          </ion-col>\\n          <ion-col size=\\\"auto\\\"  >\\n            <ion-chip outline color=\\\"warning\\\"  >\\n              <ion-label>\\n                In-Progress <b>({{getTotalInProgress()}}) </b>\\n              </ion-label>\\n            </ion-chip>\\n          </ion-col>\\n          <ion-col size=\\\"auto\\\">\\n            <ion-chip outline color=\\\"success\\\">\\n              <ion-label> Done <b>({{getTotalCompleted()}}) </b> </ion-label>\\n            </ion-chip>\\n          </ion-col>\\n        </ion-row>\\n        <ion-list>\\n          <ion-row\\n            *ngFor=\\\"let item of userProgress; let i = index\\\"\\n            style=\\\"justify-items: left;\\\"\\n          >\\n            <ion-col>\\n              <ion-item>\\n                <ion-label\\n                  class=\\\"ion-text-start ion-text-capitalize ion-text-wrap\\\"\\n                >\\n                  <h3><b> {{i+1}}- </b>{{ item.taskName }}</h3>\\n                </ion-label>\\n\\n                <ion-badge\\n                  [color]=\\\"\\n                      item.progress > 99\\n                        ? 'success'\\n                        : item.progress < 50\\n                        ? 'warning'\\n                        : 'primary'\\n                    \\\"\\n                >\\n                  {{ item.progress }}%\\n                </ion-badge>\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n        </ion-list>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\";"," \nexport class UserProgress { \n    // taskId: any;\n    // taskName: string;\n    userId: any;\n    userName: any;\n    avgProgress: any;\n    totaltasks :any;\n    totalInProgress :any;\n    totalInCompeletd :any;\n \n}\n","export class User {\r\n  public userId: any;\r\n  public userName: string;\r\n  constructor(userid?, username?) {\r\n    this.userId = userid;\r\n    this.userName = username;\r\n  }\r\n}\r\n","export default \".popover-content {\\n  background: #222;\\n}\\n\\n/* Works - pass \\\"my-custom-class\\\" in cssClass to increase specificity */\\n\\n.my-custom-class .popover-content {\\n  background: #222;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvUGFnZXMvdXNlci10YXNrcy9EOlxcV29ya1xcTFRJXFxQcm9qZWN0c1xcSW9uaWNcXFRhc2tUcmFja2VyL3NyY1xcYXBwXFxQYWdlc1xcdXNlci10YXNrc1xcdXNlci10YXNrcy5wYWdlLnNjc3MiLCJzcmMvYXBwL1BhZ2VzL3VzZXItdGFza3MvdXNlci10YXNrcy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtBQ0NKOztBREVFLHVFQUFBOztBQUNBO0VBQ0UsZ0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL1BhZ2VzL3VzZXItdGFza3MvdXNlci10YXNrcy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucG9wb3Zlci1jb250ZW50IHtcclxuICAgIGJhY2tncm91bmQ6ICMyMjI7XHJcbiAgfVxyXG4gIFxyXG4gIC8qIFdvcmtzIC0gcGFzcyBcIm15LWN1c3RvbS1jbGFzc1wiIGluIGNzc0NsYXNzIHRvIGluY3JlYXNlIHNwZWNpZmljaXR5ICovXHJcbiAgLm15LWN1c3RvbS1jbGFzcyAucG9wb3Zlci1jb250ZW50IHtcclxuICAgIGJhY2tncm91bmQ6ICMyMjI7XHJcbiAgfSIsIi5wb3BvdmVyLWNvbnRlbnQge1xuICBiYWNrZ3JvdW5kOiAjMjIyO1xufVxuXG4vKiBXb3JrcyAtIHBhc3MgXCJteS1jdXN0b20tY2xhc3NcIiBpbiBjc3NDbGFzcyB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eSAqL1xuLm15LWN1c3RvbS1jbGFzcyAucG9wb3Zlci1jb250ZW50IHtcbiAgYmFja2dyb3VuZDogIzIyMjtcbn0iXX0= */\";","import { Component, OnInit } from \"@angular/core\";\nimport { DataService } from \"src/app/Services/data-service.service\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { User } from \"src/app/Models/user\";\n@Component({\n  selector: \"app-user-tasks\",\n  templateUrl: \"user-tasks.page.html\",\n  styleUrls: [\"user-tasks.page.scss\"],\n})\nexport class UserTasksPage implements OnInit {\n  userProgress: Array<any> = [];\n  user: User = new User(1, \"Wael Dawoud\");\n  //  listingdata:Array<any> = [];\n  constructor(\n    private datasev: DataService,\n    private activeroute: ActivatedRoute\n  ) {}\n\n  private getUserTasks() {\n    let userid: number;\n    this.activeroute.paramMap.subscribe((param) => {\n      if (!param.has(\"userid\")) {\n        //console.log(\"return\");\n        return;\n      }\n      userid = Number.parseInt(param.get(\"userid\"));\n      // console.log(userid);\n      this.userProgress = this.datasev.getUserTasks(userid);\n    });\n  }\n\n  ngOnInit() {}\n  ionViewWillEnter() {\n    //  console.log(\"this.ionViewWillEnter\");\n    this.getUserTasks();\n    //console.log(this.userProgress);\n  }\n  ionViewDidLoad() {\n    // console.log(\"this.ionViewDidLoad\");\n  }\n  getTotalInProgress():any\n  {\n    return this.userProgress.filter((x) => x.progress<100).length ;\n  }\n  getTotalCompleted():any\n  {\n    return this.userProgress.filter((x) => x.progress>=100).length ;\n  }\n}\n","import { Injectable, OnInit } from \"@angular/core\";\nimport { EventService } from \"./event-service.service\";\nimport { UserProgress } from \"../Models/user-progress\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DataService implements OnInit {\n  userProgress = new Array<UserProgress>();\n  constructor(private eventServ: EventService) {\n    this.getUsersProgress();\n  }\n  ngOnInit(): void {}\n\n  getUsersProgress() {\n    let up = new UserProgress();\n    up.avgProgress = 50;\n    // up.taskId = 1;\n    // up.taskName = \"Angular 8 Complete course\";\n    up.userId = 1;\n    up.userName = \"Wael Dawoud\";\n    up.totaltasks = 2;\n    this.userProgress.push(up);\n    \n\n    up = null;\n  }\n  getUserTasks(userid: number): Array<any> {\n    let arr = this.userProgress.filter((x) => x.userId === userid);\n    return arr;\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { UserProgress } from '../Models/user-progress';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService  {\n  UserProgressAdded = new EventEmitter<UserProgress>();\n  constructor() { }\n}\n"],"sourceRoot":"webpack:///"}